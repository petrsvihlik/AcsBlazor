@page "/"

@inject CommunicationConfiguration CommunicationConfiguration

<PageTitle>Chat</PageTitle>
My name: <input @bind="State.Name"  />
<br />
Other participants: @((MarkupString)Participants)
<br />
<hr />
Thread topic: <span title="@SharedState.ChatThread?.Id">@SharedState.ChatThread?.Topic</span>

<p role="status" style="overflow-y: scroll;max-height:300px;min-height:300px;background-color: lightgray;">@((MarkupString)Messages)</p>
<br />

<textarea @bind="messageToSend" style="width: 50%;" />
<br />
<button class="btn btn-primary" @onclick="SendMessage" disabled="@(!State.Initialized)">Send message</button>



@code {

    public string Participants { get; set; }

    public string Messages { get; set; }

    private string? messageToSend;

    public State State { get; set; } = new State();

    private Timer timer;

    private async Task SendMessage()
    {
        SendChatMessageResult sendChatMessageResult = await State.ChatThreadClient.SendMessageAsync(content: messageToSend, type: ChatMessageType.Text, State.Name);
        messageToSend = string.Empty;
        await RefreshMessages();
    }

    //private async Task RefreshChatThreads()
    //{
    //    AsyncPageable<ChatThreadItem> chatThreadItems = State.ChatClient.GetChatThreadsAsync();
    //    await foreach (ChatThreadItem chatThreadItem in chatThreadItems)
    //    {
    //    }
    //}


    private async Task RefreshMessages()
    {
        AsyncPageable<ChatMessage> allMessages = State.ChatThreadClient.GetMessagesAsync();
        string messages = string.Empty;
        await foreach (ChatMessage message in allMessages)
        {
            if (message.Type == ChatMessageType.Text)
            {
                messages += $"<strong>{message.SenderDisplayName}</strong> {message.CreatedOn.Humanize() }:{message.Content.Message}<br />";
            }
        }
        Messages = messages;
    }

    private async Task RefreshParticipants()
    {
        AsyncPageable<ChatParticipant> allParticipants = SharedState.ManagingChatThreadClient.GetParticipantsAsync();
        string particpants = string.Empty;
        await foreach (ChatParticipant participant in allParticipants)
        {
            var user = ((Azure.Communication.CommunicationUserIdentifier)participant.User);
            if (user.Id != State.User.Id)
            {
                particpants += $"<span title='{((CommunicationUserIdentifier)participant.User).Id}'>{participant.DisplayName}</span>, ";
            }
        }
        particpants = particpants.TrimEnd(new[] { ' ', ',' });
        if(string.IsNullOrEmpty(particpants))
        {
            particpants = "none";
        }
        Participants = particpants;
    }

    protected override async Task OnInitializedAsync()
    {
        var userAndToken = await GetCommunicationIdentityToken(CommunicationConfiguration.Endpoint, CommunicationConfiguration.AccessKey);
        CommunicationTokenCredential communicationTokenCredential = new CommunicationTokenCredential(userAndToken.AccessToken.Token);

        State.User = userAndToken.User;
        State.ChatClient = new ChatClient(CommunicationConfiguration.Endpoint, communicationTokenCredential);
        State.Name = $"Random user #{new Random(DateTime.Now.Millisecond).Next(0, 1000)}";

        var chatParticipant = new ChatParticipant(identifier: State.User)
            {
                DisplayName = State.Name
            };

        if (SharedState.ChatThread == null)
        {
            CreateChatThreadResult createChatThreadResult = await State.ChatClient.CreateChatThreadAsync(topic: "General discussion", participants: new[] { chatParticipant });
            SharedState.ChatThread = createChatThreadResult.ChatThread;
        }

        State.ChatThreadClient = State.ChatClient.GetChatThreadClient(threadId: SharedState.ChatThread.Id);

        if (SharedState.ManagingChatThreadClient == null)
        {
            // New session
            SharedState.ManagingChatThreadClient = State.ChatThreadClient;
        }
        else
        {
            await SharedState.ManagingChatThreadClient.AddParticipantAsync(chatParticipant);
        }

        await RefreshParticipants();

        State.Initialized = true;
        timer = new Timer(new TimerCallback(OnTimerInterval), null, 1000, 1000);
    }


    private async void OnTimerInterval(object? sender)
    {
        await RefreshMessages();
        await RefreshParticipants();
        //await RefreshChatThreads();

        await InvokeAsync(() => StateHasChanged());
    }

    private static async Task<CommunicationUserIdentifierAndToken> GetCommunicationIdentityToken(Uri endpoint, string accessKey)
    {
        CommunicationIdentityClient communicationIdentityClient = new(endpoint, new AzureKeyCredential(accessKey), new CommunicationIdentityClientOptions());
        IEnumerable<CommunicationTokenScope> scopes = new[] { CommunicationTokenScope.Chat, CommunicationTokenScope.VoIP };
        var response = await communicationIdentityClient.CreateUserAndTokenAsync(scopes);
        return response.Value;
    }
}